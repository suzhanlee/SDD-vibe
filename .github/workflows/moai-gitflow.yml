name: MoAI-ADK GitFlow Automation

# MoAI-ADK 3-stage pipeline: spec → build → sync
# Full GitFlow transparency — no Git expertise needed

on:
  push:
    branches: [develop, "feature/**"]
  pull_request:
    types: [opened, ready_for_review, converted_to_draft]

jobs:
  moai-pipeline:
    name: 🗿 MoAI-ADK Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Multi-language toolchains (conditional)
      - name: Setup Python
        if: ${{ hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup Node.js
        if: ${{ hashFiles('package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup Bun
        if: ${{ hashFiles('bun.lockb') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Setup Go
        if: ${{ hashFiles('go.mod') != '' }}
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Setup Rust
        if: ${{ hashFiles('Cargo.toml') != '' }}
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Java
        if: ${{ hashFiles('pom.xml') != '' || hashFiles('build.gradle') != '' || hashFiles('build.gradle.kts') != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup .NET
        if: ${{ hashFiles('**/*.sln') != '' || hashFiles('**/*.csproj') != '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Setup Ruby
        if: ${{ hashFiles('Gemfile') != '' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Setup Flutter
        if: ${{ hashFiles('pubspec.yaml') != '' }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.x"
          channel: "stable"

      - name: Setup Swift (Xcode)
        if: ${{ hashFiles('Package.swift') != '' || hashFiles('**/*.xcodeproj') != '' || hashFiles('**/*.xcworkspace') != '' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "latest-stable"

      - name: Setup Kotlin
        if: ${{ hashFiles('build.gradle.kts') != '' || hashFiles('settings.gradle.kts') != '' }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      # TRUST 5 Principles — automated validation
      # Note: Validation is handled by TypeScript-based tools
      - name: 🧭 TRUST 5 Principles Check
        run: |
          echo "✅ TRUST validation is performed by TypeScript-based tools"
          echo "   - Uses @agent-trust-checker"
          echo "   - Leverages TypeScript hook system"

      # Ignore test failures on Draft PRs; fail CI on Ready PRs
      - name: Run language-aware tests
        run: |
          set -e
          ALLOW_FAILURE="${{ github.event.pull_request.draft == true }}"
          echo "🔎 Running language-aware tests (Draft PR: allow failure = $ALLOW_FAILURE)"

          # Python tests
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            echo "➡️  Python tests"
            pip install -q pytest pytest-cov 2>/dev/null || true
            if [ "$ALLOW_FAILURE" = "true" ]; then
              pytest --cov --cov-report=term-missing || true
            else
              pytest --cov --cov-report=term-missing
            fi
          fi

          # Node.js/Bun tests
          if [ -f "package.json" ]; then
            echo "➡️  Node.js/Bun tests"
            if [ -f "bun.lockb" ]; then
              bun install --frozen-lockfile || bun install
              if [ "$ALLOW_FAILURE" = "true" ]; then
                bun test || true
              else
                bun test
              fi
            else
              npm ci --prefer-offline || npm install
              if [ "$ALLOW_FAILURE" = "true" ]; then
                npm test --if-present -- --coverage || true
              else
                npm test --if-present -- --coverage
              fi
            fi
          fi

          # Go tests
          if [ -f "go.mod" ]; then
            echo "➡️  Go tests"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              go test -v -cover ./... || true
            else
              go test -v -cover ./...
            fi
          fi

          # Rust tests
          if [ -f "Cargo.toml" ]; then
            echo "➡️  Rust tests"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              cargo test --all --locked || cargo test || true
            else
              cargo test --all --locked || cargo test
            fi
          fi

          # Java tests (Maven)
          if [ -f "pom.xml" ]; then
            echo "➡️  Java tests (Maven)"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              mvn -q -DskipTests=false test || true
            else
              mvn -q -DskipTests=false test
            fi
          fi

          # Java/Kotlin tests (Gradle)
          if [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "➡️  Java/Kotlin tests (Gradle)"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              ./gradlew test || gradle test || true
            else
              ./gradlew test || gradle test
            fi
          fi

          # .NET tests
          if compgen -G "**/*.sln" > /dev/null || compgen -G "**/*.csproj" > /dev/null; then
            echo "➡️  .NET tests"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              dotnet test || true
            else
              dotnet test
            fi
          fi

          # Ruby tests
          if [ -f "Gemfile" ]; then
            echo "➡️  Ruby tests"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              bundle exec rspec || bundle exec rake test || true
            else
              bundle exec rspec || bundle exec rake test
            fi
          fi

          # Flutter tests
          if [ -f "pubspec.yaml" ]; then
            echo "➡️  Flutter tests"
            flutter pub get
            if [ "$ALLOW_FAILURE" = "true" ]; then
              flutter test || true
            else
              flutter test
            fi
          fi

          # Swift tests
          if [ -f "Package.swift" ]; then
            echo "➡️  Swift tests (SPM)"
            if [ "$ALLOW_FAILURE" = "true" ]; then
              swift test || true
            else
              swift test
            fi
          elif compgen -G "**/*.xcodeproj" > /dev/null || compgen -G "**/*.xcworkspace" > /dev/null; then
            echo "➡️  Swift tests (Xcode)"
            # Xcode projects require a scheme; run conditionally
            if [ "$ALLOW_FAILURE" = "true" ]; then
              echo "⚠️  Xcode tests require a configured scheme"
            else
              echo "⚠️  Xcode tests require a configured scheme"
            fi
          fi

      # TAG system validation (code files only)
      - name: 🏷️ TAG System Validation
        run: |
          echo "✅ TAG validation is handled automatically in the tag_validator.py hook"

      # Run per-branch stages
      - name: 📝 SPEC Stage (feature branch)
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          echo "🌿 Feature branch: SPEC validation stage"
          echo "- spec-builder agent authors EARS spec"
          echo "- Draft PR is created automatically"

      - name: 🔴🟢🔄 BUILD Stage (Draft PR)
        if: github.event.pull_request.draft == true
        run: |
          echo "📝 Draft PR: TDD implementation stage"
          echo "- code-builder agent runs RED-GREEN-REFACTOR"
          echo "- Validate TRUST 5 Principles compliance"

      - name: 📚 SYNC Stage (Ready PR)
        if: github.event.pull_request.draft == false && github.event.action == 'ready_for_review'
        run: |
          echo "✅ Ready PR: documentation sync stage"
          echo "- doc-syncer agent synchronizes Living Documents"
          echo "- PR is ready for review"

      # Final result report
      - name: 📊 MoAI Pipeline Complete
        run: |
          echo "🗿 MoAI-ADK GitFlow automation complete"
          echo "✨ Professional workflow without needing to know Git"

